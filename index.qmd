---
title: "Cinco Especies de Serpientes de Costa Rica"
format: 
  html:
    theme: cosmo
    page-layout: custom
server: shiny
author: "Josel Vargas y Valentina Rodriguez"
---

# Objetivo
El presente repositorio contiene los disntintos procedimientos que se requieren para obtener una adecuada georreferenciación de bases de datos y la elaboración de mapas y tablas dinámicas e interaactivas.

El objetivo del proywcto final es aplicar los conocimientos de los contenidos corresposdientes:

1.  Desarrollar programas en el lenguaje R y documentos en el sistema de publicación científica y técnica Quarto.

2.  Implementar tablas, gráficos y mapas con las bibliotecas DT, ggplot2, plotly, sf y Shiny.

3.  Publicar resultados en la Web, junto con el código y los datos que los generan.

Se analizaran un dataset de avistamiento de varias especies de serpientes descargado de la base de datos de Global Biodiversity Information Facility, se descaragarán capas desde el SNIT. Se crearán tablas por medio de consultas en R, se generarán mapas y gráficos.Al Final se publicara es Shiny Apps

# Fuente de datos

[Registros de presencia de Varias especies de serpientes de Costa Rica, agrupados por la Infraestructura Mundial de Información en Biodiversidad (GBIF)](https://www.gbif.org/occurrence/download/0196891-220831081235567)

[Áreas silvestres protegidas (ASP) de Costa Rica, publicadas por el Sistema Nacional de Áreas de Conservación (Sinac) en el Sistema Nacional de Información Territorial (SNIT)](https://www.snitcr.go.cr/ico_servicios_ogc_info?k=bm9kbzo6NDA=&nombre=SINAC)


```{r}
#| label: inicio
#| context: setup
#| message: false
#| warning: false
# Bloque para operaciones iniciales
library(tidyverse) #Carga de tidyverse (incluye ggplot3 y readr)
library(plotly) # Carga de plotly
library(DT) # Carga de DT
library(dplyr) # Carga de dplyr
library(sf) #Carga de sf
library(leaflet) #Carga de leaflet para mapas interactivos
library(data.table)
library(shiny)
library(rsconnect)
library(RColorBrewer) #para dar formatos de color a la grafica
```

```{r}
#| label: lectura-datos
#| context: data
#| message: false
#| warning: false
# Bloque para lectura de datos y compartirlos
# en todos los bloques de código
# Archivo DwC con registros de presencia

setwd("~/UCR/maestria/II Semestre 2022/progra/proyectofinal/DATA")

archivo_dwc <- "data.csv"
# Lectura del archivo DwC
registros <-
  st_read(
    archivo_dwc,
    options = c(
      "X_POSSIBLE_NAMES=decimalLongitude", # columna de longitud decimal
      "Y_POSSIBLE_NAMES=decimalLatitude"   # columna de latitud decimal
    ),
    quiet = TRUE
  )


#cargamos Shape de Aconservacion

aconservacion <-
  st_read(
    "C:/Users/josel/OneDrive/Documentos/ATLAS2014_CRTM05/AConservacionSINAC2014/AConsevacionSINAC2014.shp",
    quiet = TRUE) # para evitar el despliegue de mensajes


```

## Tabla de filtro

```{r}
#| panel: sidebar
#| message: false
#| warning: false
# Barra lateral
# Lista de especies
#| warning: false
lista_especies <- unique(registros$species)
lista_especies <- sort(lista_especies)
lista_especies <- c("Todas", lista_especies)
# Selector de especies
selectInput(
  inputId = "especie",
  label = "Especie",
  choices = lista_especies,
  selected = "Todas"
)


# Lista de años
lista_anios <- unique(registros$year)
lista_anios <- sort(lista_anios)
lista_anios <- c("Todas", lista_anios)

# Selector de especies
selectInput(
  inputId = "anio",
  label = "Año",
  choices = lista_anios,
  selected = "Todas"
)


# Lista de provincia
lista_provincia <- unique(registros$stateProvince)
lista_provincia <- sort(lista_provincia)
lista_provincia <- c("Todas", lista_provincia)

# Selector de especies
selectInput(
  inputId = "provincia",
  label = "Provincia",
  choices = lista_provincia,
  selected = "Todas"
)


```


```{r}
 #| panel: fill
 #| message: false
#| warning: false
# Cuerpo principal de la interfaz de usuario
dataTableOutput("tabla")
```


```{r}
#| label: servidor-tabla
#| context: server
#| message: false
#| warning: false
# Operaciones en el servidor

# Función reactiva para filtrar los registros con base en los controles de entrada
filtrarRegistros <- reactive({
  # Valor inicial del objeto que va a retornarse
  registros_filtrados <- registros
  
  if (input$especie != "Todas") {
    registros_filtrados <-
      registros_filtrados |>
      filter(species == input$especie) 
  }

  if (input$anio != "Todas") {
    registros_filtrados <-
      registros_filtrados |>
      filter(year == input$anio) 
  }  
  
  if (input$provincia != "Todas") {
    registros_filtrados <-
      registros_filtrados |>
      filter(stateProvince == input$provincia) 
  }
  
  return(registros_filtrados)
})  

  
# Tabla con registros de presencia
output$tabla <- renderDataTable({
  registros <- filtrarRegistros()
  
  registros |>
    st_drop_geometry() |>
    select(species, stateProvince, locality, eventDate) |>
    datatable(
      colnames = c("Especie", "Provincia", "Localidad", "Fecha"),
      options = list(
        pageLength = 5,
        language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
      )
    )
})

```


## GRAFICO


```{r}
#| panel: sidebar
#| message: false
#| warning: false
# Barra lateral
# Lista de especies

lista_especies_plot <- unique(registros$species)
lista_especies_plot <- sort(lista_especies_plot)
lista_especies_plot <- c("Todas", lista_especies_plot)
# Selector de especies
selectInput(
  inputId = "especie_plot",
  label = "Especie",
  choices = lista_especies_plot,
  selected = "Todas"
)


# Lista de años
lista_anios_plot <- unique(registros$year)
lista_anios_plot <- sort(lista_anios_plot)
lista_anios_plot <- c("Todas", lista_anios_plot)

# Selector de años
selectInput(
  inputId = "anio_plot",
  label = "Año",
  choices = lista_anios_plot,
  selected = "Todas"
)


# Lista de provincia
lista_provincia_plot <- unique(registros$stateProvince)
lista_provincia_plot <- sort(lista_provincia_plot)
lista_provincia_plot <- c("Todas", lista_provincia_plot)

# Selector de provincia
selectInput(
  inputId = "provincia_plot",
  label = "Provincia",
  choices = lista_provincia_plot,
  selected = "Todas"
)


```


```{r}
#| panel: fill
#| message: false
#| warning: false
# Cuerpo principal de la interfaz de usuario
plotlyOutput("plot")
```


```{r}
#| label: servidor_plot
#| context: server
#| message: false
#| warning: false

# Operaciones en el servidor

# Función reactiva para filtrar los registros con base en los controles de entrada
filtrarRegistros_plot <- reactive({
  # Valor inicial del objeto que va a retornarse
  registros_filtrados_plot <- registros
  
  if (input$especie_plot != "Todas") {
    registros_filtrados_plot <-
      registros_filtrados_plot |>
      filter(species == input$especie_plot) 
  }

  if (input$anio_plot != "Todas") {
    registros_filtrados_plot <-
      registros_filtrados_plot |>
      filter(year == input$anio_plot) 
  }  
  
  if (input$provincia_plot != "Todas") {
    registros_filtrados_plot <-
      registros_filtrados_plot |>
      filter(stateProvince == input$provincia_plot) 
  }
  
  return(registros_filtrados_plot)
})  

  
# grafico con registros de presencia
output$plot <- renderPlotly({
  registros <- filtrarRegistros_plot()
  
    registros <-
    registros |>
      filter(month %in% seq(1,12,1)) 
  
  meses = c("1" = "ene", "2" = "feb", "3" = "mar", "4" = "abr", 
             "5" = "may", "6" = "jun", "7" = "jul", "8" = "ago", 
             "9" =  "set", "10" =  "oct", "11" =  "nov", "12" =  "dic")
  
grafico_barras_serpientes <-
  registros |>
  ggplot(aes(x = as.numeric(month), fill = species)) +
  geom_bar() +
  scale_x_continuous(breaks = seq(1,12,1), labels = meses) +
  ggtitle("Cantidad de registros por especie en cada mes") +
  xlab("Mes") +
  ylab("Cantidad") +
  labs(fill = "Especie") +
  theme_classic() +
  theme(legend.position = "top")

# Gráfico de barras plotly
ggplotly(grafico_barras_serpientes) |> 
  config(locale = 'es')
})

```


## Mapa de Registros

```{r}
#| panel: sidebar
# Barra lateral
# Lista de especies
lista_especies_map <- unique(registros$species) #obtener valores 
lista_especies_map <- sort(lista_especies_map) #ordenar
lista_especies_map <- c("Todas", lista_especies_map) #agregar opción todas

# Selector de especies
selectInput(
  inputId = "especie_map",
  label = "Especie",
  choices = lista_especies_map,
  selected = "Todas"
)

#Lita años
lista_anios_map <- unique(registros$year) #obtener valores 
lista_anios_map <- sort(lista_anios_map) #ordenar
lista_anios_map <- c("Todas", lista_anios_map) #agregar opción todas

# Selector de anio
selectInput(
  inputId = "anio_map",
  label = "Año",
  choices = lista_anios_map,
  selected = "Todas"
)

#Lista Estados
lista_provincia_map <- unique(registros$stateProvince) #obtener valores 
lista_provincia_map <- sort(lista_provincia_map) #ordenar
lista_provincia_map <- c("Todas", lista_provincia_map) #agregar opción todas

# Selector de estados
selectInput(
  inputId = "provincia_map",
  label = "Provincia",
  choices = lista_provincia_map,
  selected = "Todas"
)

```

```{r}
#| panel: fill

# Cuerpo principal de la interfaz de usuario

leafletOutput("mymap")

```

```{r}
#| label: servidor-mapa
#| context: server
#| warning: false

filtrarRegistros_map <- reactive({
  # Valor inicial del objeto que va a retornarse
  registros_filtrados_map <- registros
  
  if (input$especie_map != "Todas") {
    registros_filtrados_map <-
      registros_filtrados_map |>
      filter(species == input$especie_map)
  }
  
    if (input$anio_map != "Todas") {
    registros_filtrados_map <-
      registros_filtrados_map |>
      filter(year == input$anio_map)
  }
  
  if (input$provincia_map != "Todas") {
    registros_filtrados_map <-
      registros_filtrados_map |>
      filter(stateProvince == input$provincia_map)
  }
  
  return(registros_filtrados_map)
})  

output$mymap <- renderLeaflet({
  
  registros <- filtrarRegistros_map()
  
  #Transformación de dataframe a shapefile

  registros_v <-
    st_as_sf(registros, coords = c("decimalLongitude", "decimalLatitude"))

  class(registros_v) #para corroborar el cambio de tipo de datos

#Definición de SCR

  st_crs(registros_v) <- 4326

# Transformación del CRS del objeto provincias a WGS84 (EPSG = 4326)

aconservacion <-
  aconservacion |>
  st_transform(4326)
  
leaflet() |>
  setView(# centro y nivel inicial de acercamiento
    lng = -84.19452,
    lat = 9.572735,
    zoom = 7) |>
  addTiles(group = "OpenStreetMap") |>
  addProviderTiles(providers$Esri.NatGeoWorldMap) |>
  addPolygons(
    # capa de area de conservacion (polígonos)
    data = aconservacion,
    color = "black",
    fillColor = "transparent",
    stroke = TRUE,
    weight = 1.0,
    group = "Area Conservacion",
    popup = paste(
      paste0("<strong>Area de Conservacion: </strong>", aconservacion$NOMBRE_AR),
      sep = '<br/>'
    )) |>
  addCircleMarkers(
    # capa de registros de presencia (puntos)
    data = registros_v,
    stroke = F,
    radius = 5,
    fillColor = 'black',
    fillOpacity = 1,
    group = "Serpientes",
    popup = paste(
      paste0("<strong>Especie: </strong>", registros$species ), 
      paste0("<br><strong>Provincia: </strong>", registros$stateProvince ), 
      paste0("<br><strong>Localidad: </strong>", registros$locality), 
      paste0("<br><strong>Fecha: </strong>", registros$eventDate )
    )#<br> asigna una nueva línea para  una mejor visualización en el popup.
  ) |>
  addLayersControl(
    baseGroups = c("OpenStreetMap", "Esri.NatGeoWorldMap"),
    overlayGroups = c("Serpientes", "Area Conservacion")) |> # control de capas
  addScaleBar(position = "bottomright", options = scaleBarOptions(imperial = FALSE)) |> # barra de escala
  addMiniMap(position = "bottomleft")  # mapa de ubicación

})

```

